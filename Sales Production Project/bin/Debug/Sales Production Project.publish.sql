/*
Deployment script for Sales_Production_Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Sales_Production_Database"
:setvar DefaultFilePrefix "Sales_Production_Database"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER01\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER01\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Schema [Production]...';


GO
CREATE SCHEMA [Production]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Sales]...';


GO
CREATE SCHEMA [Sales]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Table [Production].[Brands]...';


GO
CREATE TABLE [Production].[Brands] (
    [BrandID]   INT           IDENTITY (1, 1) NOT NULL,
    [BrandName] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([BrandID] ASC)
);


GO
PRINT N'Creating Table [Production].[Stocks]...';


GO
CREATE TABLE [Production].[Stocks] (
    [StoreID]   INT NOT NULL,
    [ProductID] INT NOT NULL,
    [Quantity]  INT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY CLUSTERED ([StoreID] ASC, [ProductID] ASC)
);


GO
PRINT N'Creating Table [Production].[Products]...';


GO
CREATE TABLE [Production].[Products] (
    [ProductID]   INT           IDENTITY (1, 1) NOT NULL,
    [ProductName] NVARCHAR (50) NOT NULL,
    [BrandID]     INT           NOT NULL,
    [CategoryID]  INT           NOT NULL,
    [ModelYear]   INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([ProductID] ASC)
);


GO
PRINT N'Creating Table [Production].[Categories]...';


GO
CREATE TABLE [Production].[Categories] (
    [CategoryID]   INT           IDENTITY (1, 1) NOT NULL,
    [CategoryName] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([CategoryID] ASC)
);


GO
PRINT N'Creating Table [Sales].[Staff]...';


GO
CREATE TABLE [Sales].[Staff] (
    [StaffID]     INT           IDENTITY (1, 1) NOT NULL,
    [FirstName]   NVARCHAR (50) NOT NULL,
    [LastName]    NVARCHAR (50) NOT NULL,
    [Email]       NVARCHAR (50) NOT NULL,
    [PhoneNumber] INT           NOT NULL,
    [Active]      BIT           NOT NULL,
    [StoreID]     INT           NOT NULL,
    [ManagerID]   INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([StaffID] ASC),
    UNIQUE NONCLUSTERED ([Email] ASC),
    UNIQUE NONCLUSTERED ([PhoneNumber] ASC)
);


GO
PRINT N'Creating Table [Sales].[Orders]...';


GO
CREATE TABLE [Sales].[Orders] (
    [OrderID]      INT           IDENTITY (1, 1) NOT NULL,
    [CustomerID]   INT           NOT NULL,
    [OrderStatus]  NVARCHAR (50) NOT NULL,
    [OrderDate]    DATE          NOT NULL,
    [RequiredDate] DATE          NOT NULL,
    [ShippedDate]  DATE          NOT NULL,
    [StoreID]      INT           NOT NULL,
    [StaffID]      INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderID] ASC)
);


GO
PRINT N'Creating Table [Sales].[Order_Items]...';


GO
CREATE TABLE [Sales].[Order_Items] (
    [OrderID]   INT NOT NULL,
    [ItemID]    INT NOT NULL,
    [ProductID] INT NOT NULL,
    [Quantity]  INT NOT NULL,
    [ListPrice] INT NOT NULL,
    [Discount]  INT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderID] ASC, [ItemID] ASC)
);


GO
PRINT N'Creating Table [Sales].[Customers]...';


GO
CREATE TABLE [Sales].[Customers] (
    [CustomerID]  INT            IDENTITY (1, 1) NOT NULL,
    [FirstName]   NVARCHAR (50)  NOT NULL,
    [LastName]    NVARCHAR (50)  NOT NULL,
    [PhoneNumber] NVARCHAR (50)  NOT NULL,
    [Email]       NVARCHAR (255) NOT NULL,
    [Street]      NVARCHAR (50)  NOT NULL,
    [City]        NVARCHAR (50)  NOT NULL,
    [State]       NVARCHAR (50)  NOT NULL,
    [ZipCode]     INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([CustomerID] ASC),
    UNIQUE NONCLUSTERED ([Email] ASC),
    UNIQUE NONCLUSTERED ([PhoneNumber] ASC)
);


GO
PRINT N'Creating Table [Sales].[Stores]...';


GO
CREATE TABLE [Sales].[Stores] (
    [StoreID]   INT            IDENTITY (1, 1) NOT NULL,
    [StoreName] NVARCHAR (50)  NOT NULL,
    [Phone]     NVARCHAR (50)  NOT NULL,
    [Email]     NVARCHAR (255) NOT NULL,
    [Street]    NVARCHAR (255) NOT NULL,
    [State]     NVARCHAR (50)  NOT NULL,
    [ZipCode]   INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([StoreID] ASC),
    UNIQUE NONCLUSTERED ([Email] ASC),
    UNIQUE NONCLUSTERED ([Phone] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [Sales].[Staff]...';


GO
ALTER TABLE [Sales].[Staff]
    ADD DEFAULT 1 FOR [Active];


GO
PRINT N'Creating Foreign Key unnamed constraint on [Production].[Stocks]...';


GO
ALTER TABLE [Production].[Stocks] WITH NOCHECK
    ADD FOREIGN KEY ([StoreID]) REFERENCES [Sales].[Stores] ([StoreID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Production].[Stocks]...';


GO
ALTER TABLE [Production].[Stocks] WITH NOCHECK
    ADD FOREIGN KEY ([ProductID]) REFERENCES [Production].[Products] ([ProductID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Production].[Products]...';


GO
ALTER TABLE [Production].[Products] WITH NOCHECK
    ADD FOREIGN KEY ([CategoryID]) REFERENCES [Production].[Categories] ([CategoryID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Production].[Products]...';


GO
ALTER TABLE [Production].[Products] WITH NOCHECK
    ADD FOREIGN KEY ([BrandID]) REFERENCES [Production].[Brands] ([BrandID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Sales].[Staff]...';


GO
ALTER TABLE [Sales].[Staff] WITH NOCHECK
    ADD FOREIGN KEY ([StoreID]) REFERENCES [Sales].[Stores] ([StoreID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Sales].[Staff]...';


GO
ALTER TABLE [Sales].[Staff] WITH NOCHECK
    ADD FOREIGN KEY ([ManagerID]) REFERENCES [Sales].[Staff] ([StaffID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Sales].[Orders]...';


GO
ALTER TABLE [Sales].[Orders] WITH NOCHECK
    ADD FOREIGN KEY ([CustomerID]) REFERENCES [Sales].[Customers] ([CustomerID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Sales].[Orders]...';


GO
ALTER TABLE [Sales].[Orders] WITH NOCHECK
    ADD FOREIGN KEY ([StaffID]) REFERENCES [Sales].[Staff] ([StaffID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Sales].[Orders]...';


GO
ALTER TABLE [Sales].[Orders] WITH NOCHECK
    ADD FOREIGN KEY ([StoreID]) REFERENCES [Sales].[Stores] ([StoreID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Sales].[Order_Items]...';


GO
ALTER TABLE [Sales].[Order_Items] WITH NOCHECK
    ADD FOREIGN KEY ([ProductID]) REFERENCES [Production].[Products] ([ProductID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Sales].[Order_Items]...';


GO
ALTER TABLE [Sales].[Order_Items] WITH NOCHECK
    ADD FOREIGN KEY ([OrderID]) REFERENCES [Sales].[Orders] ([OrderID]);


GO
PRINT N'Creating View [Production].[Stocks_View]...';


GO
CREATE VIEW [Production].[Stocks_View]
	AS SELECT 
	StoreID,
	ProductID,
	Quantity
	
	FROM Production.Stocks
GO
PRINT N'Creating View [Production].[Products_View]...';


GO
CREATE VIEW [Production].[Products_View]
	AS SELECT 
	ProductID,
	ProductName,
	ModelYear
	
	FROM Production.Products
GO
PRINT N'Creating View [Production].[Categories_View]...';


GO
CREATE VIEW [Production].[Categories_View]
	AS SELECT 
	CategoryID,
	CategoryName
	
	FROM Production.Categories
GO
PRINT N'Creating View [Production].[Brands_View]...';


GO
CREATE VIEW [Production].[Brands_View]
	AS SELECT 
	BrandID,
	BrandName 
	
	FROM Production.Brands
GO
PRINT N'Creating View [Sales].[Stores_View]...';


GO
CREATE VIEW [Sales].[Stores_View]
	AS SELECT 
	StoreID,
	StoreName,
	Phone,
	Email

	FROM Sales.Stores
GO
PRINT N'Creating View [Sales].[Orders_View]...';


GO
CREATE VIEW [Sales].[Orders_View]
	AS SELECT 
	OrderID,
	CustomerID,
	OrderStatus,
	OrderDate,
	RequiredDate,
	ShippedDate
	
	FROM Sales.Orders
GO
PRINT N'Creating View [Sales].[Order_Items_View]...';


GO
CREATE VIEW [Sales].[Order_Items_View]
	AS SELECT
	OrderID,
	ItemID,
	ProductID,
	Quantity

	FROM Sales.Order_Items
GO
PRINT N'Creating View [Sales].[Staff_View]...';


GO
CREATE VIEW [Sales].[Staff_View]
	AS SELECT
	StaffID,
	FirstName,
	LastName,
	Active,
	StoreID
	
	FROM [Sales].[Staff]
GO
PRINT N'Creating View [Sales].[Customer_View]...';


GO
CREATE VIEW [Sales].[Customer_View]
	AS SELECT 
	CustomerID,
	FirstName,
	LastName,
	PhoneNumber,
	Email
	
	FROM [Sales].[Customers]
GO
PRINT N'Creating Procedure [Production].[AddStock]...';


GO
CREATE PROCEDURE [Production].[AddStock]
	@StoreID INT,
	@ProductID INT,
	@Quantity INT 
AS
BEGIN
	INSERT INTO Production.Stocks(StoreID, ProductID, Quantity)
	VALUES(@StoreID, @ProductID, @Quantity);
END;

EXEC Production.AddStock 1, 1, 1

INSERT INTO Production.Stocks(StoreID, ProductID, Quantity)
	VALUES(1, 2, 3);
GO
PRINT N'Creating Procedure [Production].[AddProduct]...';


GO
CREATE PROCEDURE [Production].[AddProduct]
	@ProductName NVARCHAR(50),
	@BrandID INT,
	@CategoryID INT,
	@ModelYear INT
AS
BEGIN
	INSERT INTO Production.Products(ProductName, BrandID, CategoryID, ModelYear)
	VALUES(@ProductName, @BrandID, @CategoryID, @ModelYear)
END;
GO
PRINT N'Creating Procedure [Production].[AddCategory]...';


GO
CREATE PROCEDURE [Production].[AddCategory]
	@CategoryName NVARCHAR(50)
AS
BEGIN
	INSERT INTO Production.Categories(CategoryName)
	VALUES(@CategoryName)
END;
GO
PRINT N'Creating Procedure [Production].[AddBrand]...';


GO
CREATE PROCEDURE [Production].[AddBrand]
	@BrandName NVARCHAR(50)
AS
BEGIN
	INSERT INTO Production.Brands(BrandName)
	VALUES(@BrandName)

END;
GO
PRINT N'Creating Procedure [Sales].[AddOrder]...';


GO
CREATE PROCEDURE [Sales].[AddOrder]
	@CustomerID INT,
	@OrderStatus NVARCHAR(50),
	@OrderDate DATE,
	@RequiredDate DATE,
	@ShippedDate DATE,
	@StoreID INT,
	@StaffID INT

AS
BEGIN
	INSERT INTO Sales.Orders(CustomerID, OrderStatus, OrderDate, RequiredDate, ShippedDate, StoreID, StaffID)
	VALUES(@CustomerID, @OrderStatus, @OrderDate, @RequiredDate, @ShippedDate, @StoreID, @StaffID)
END;
GO
PRINT N'Creating Procedure [Sales].[AddStore]...';


GO
CREATE PROCEDURE [Sales].[AddStore]
	@StoreName NVARCHAR(50),
	@Phone NVARCHAR(50),
	@Email NVARCHAR(255),
	@Street NVARCHAR(255),
	@State NVARCHAR(50),
	@ZipCode INT
AS
BEGIN
	INSERT INTO Sales.Stores(StoreName, Phone, Email, Street, [State], ZipCode)
	VALUES(@StoreName, @Phone, @Email, @Street, @State, @ZipCode)
END;
GO
PRINT N'Creating Procedure [Sales].[AddCustomer]...';


GO
CREATE PROCEDURE [Sales].[AddCustomer]
    @FirstName NVARCHAR(50),
    @LastName NVARCHAR(50),
    @PhoneNumber NVARCHAR(50),
    @Email NVARCHAR(255),
    @Street NVARCHAR(50),
    @City NVARCHAR(50),
    @State NVARCHAR(50),      
    @ZipCode INT  
AS
BEGIN
    INSERT INTO Sales.Customers (FirstName, LastName, PhoneNumber, Email, Street, City, [State], ZipCode)
    VALUES (@FirstName, @LastName, @PhoneNumber, @Email, @Street, @City, @State, @ZipCode);

END;
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'Production.Stocks'), OBJECT_ID(N'Production.Products'), OBJECT_ID(N'Sales.Staff'), OBJECT_ID(N'Sales.Orders'), OBJECT_ID(N'Sales.Order_Items'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
